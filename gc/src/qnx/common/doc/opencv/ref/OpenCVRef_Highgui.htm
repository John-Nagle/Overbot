<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html><head>
<link rel="STYLESHEET" href="opencvref.css" charset="ISO-8859-1" type="text/css">
<title>OpenCV: Simple GUI & Video Functions</title>
</head><body>

<h1>GUI and Video Acquisition Reference</h1>

<hr><ul>
<li><a href="#Window_functions">Window functions&nbsp;</a>
<ul>
<li><a href="#decl_cvNamedWindow">NamedWindow</a>
<li><a href="#decl_cvDestroyWindow">DestroyWindow</a>
<li><a href="#decl_cvResizeWindow">ResizeWindow</a>
<li><a href="#decl_cvGetWindowHandle">GetWindowHandle</a>
<li><a href="#decl_cvGetWindowName">GetWindowName</a>
<li><a href="#decl_cvCreateTrackbar">CreateTrackbar</a>
<li><a href="#decl_cvGetTrackbarPos">GetTrackbarPos</a>
<li><a href="#decl_cvSetTrackbarPos">SetTrackbarPos</a>
<li><a href="#decl_cvSetMouseCallback">SetMouseCallback</a>
</ul>
<li><a href="#Image_handling_functions">Image handling functions</a>
<ul>
<li><a href="#decl_cvLoadImage">LoadImage</a>
<li><a href="#decl_cvSaveImage">SaveImage</a>
<li><a href="#decl_cvShowImage">ShowImage</a>
<li><a href="#decl_cvConvertImage">ConvertImage</a>
</ul>
<li><a href="#Video_I/O_functions">Video I/O functions</a>
<ul>
<li><a href="#decl_CvCapture">CvCapture</a>
<li><a href="#decl_cvCaptureFromAVI">CaptureFromAVI</a>
<li><a href="#decl_cvCaptureFromCAM">CaptureFromCAM</a>
<li><a href="#decl_cvReleaseCapture">ReleaseCapture</a>
<li><a href="#decl_cvGrabFrame">GrabFrame</a>
<li><a href="#decl_cvRetrieveFrame">RetrieveFrame</a>
<li><a href="#decl_cvQueryFrame">QueryFrame</a>
<li><a href="#decl_cvGetCaptureProperty">GetCaptureProperty</a>
<li><a href="#decl_cvSetCaptureProperty">SetCaptureProperty</a>
<li><a href="#decl_cvCreateAVIWriter">CreateAVIWriter</a>
<li><a href="#decl_cvReleaseAVIWriter">ReleaseAVIWriter</a>
<li><a href="#decl_cvWriteToAVI">WriteToAVI</a>
</ul>
<li><a href="#Support/system_functions">Support/system functions</a>
<ul>
<li><a href="#decl_cvInitSystem">InitSystem</a>
<li><a href="#decl_cvWaitKey">WaitKey</a>
<li><a href="#decl_cvAddSearchPath">AddSearchPath</a>
</ul>
</ul>


<hr><h2><a name="HighGUI_overview">HighGUI overview</a></h2>

<hr><p>TODO</p>

<hr><h2><a name="Window_functions">Window functions</a></h2>

<hr><h3><a name="decl_cvNamedWindow">cvNamedWindow</a></h3>
<p class="Blurb">Creates a window (image placeholder)</p>
<pre>int cvNamedWindow( const char* name, unsigned long flags );
</pre>
<dl>
<dt>name<dd>Name of the window which is used as window identifier and appears in
the window caption.
<dt>flags<dd>Defines window properties. Currently the only
supported property is ability to automatically change the window size to fit
the image being hold by the window. Use CV_WINDOW_AUTOSIZE for enabling the
automatical resizing or 0 otherwise.
</dl><p>
The function <a href="#decl_cvNamedWindow">cvNamedWindow</a>
creates a window which can be used as a placeholder for images and trackbars.
Created windows are reffered by their names.
</p>

<hr><h3><a name="decl_cvDestroyWindow">cvDestroyWindow</a></h3>
<p class="Blurb">Destroys a window</p>
<pre>
void cvDestroyWindow( const char* name );</pre>
<dl>
<dt>name<dd>Name of the window to be destroyed.
</dl>
<p>
The function <a href="#decl_cvDestroyWindow">cvDestroyWindow</a>
destroyes the window with the given name.
</p>


<hr><h3><a name="decl_cvResizeWindow">cvResizeWindow</a></h3>
<p class="Blurb">Sets window sizes</p>
<pre>void cvResizeWindow( const char* name, int width, int height );</pre><dl>
<dt>name<dd>Name of the window to be resized.
<dt>width<dd>New width<dt>height<dd>New height
</dl><p>
The function <a href="#decl_cvResizeWindow">cvResizeWindow</a> changes the sizes of the window.
</p>


<hr><h3><a name="decl_cvGetWindowHandle">cvGetWindowHandle</a></h3>
<p class="Blurb">Gets window handle by name</p>
<pre>void* cvGetWindowHandle( const char* name );</pre>
<dl>
<dt>name<dd>Name of the window.
</dl><p>
The function <a href="#decl_cvGetWindowHandle">cvGetWindowHandle</a>
returns native window handle (HWND in case of Win32 and Widget in case of X Window).
</p>


<hr><h3><a name="decl_cvGetWindowName">cvGetWindowName</a></h3>
<p class="Blurb">Gets window name by handle</p>
<pre>const char* cvGetWindowName( void* window_handle );</pre>
<dl>
<dt>window_handle<dd>Handle of the window.
</dl><p>
The function <a href="#decl_cvGetWindowName">cvGetWindowName</a>
returns the name of window given its native handle(HWND in case of Win32 and Widget in case of X Window).
</p>


<hr><h3><a name="decl_cvCreateTrackbar">cvCreateTrackbar</a></h3>
<p class="Blurb">Creates the trackbar and attaches it to the specified window</p>
<pre>CV_EXTERN_C_FUNCPTR( void (*CvTrackbarCallback)(int pos) );

int cvCreateTrackbar( const char* trackbar_name, const char* window_name,
                      int* value, int count, CvTrackbarCallback on_change );
</pre><dl>
<dt>trackbar_name<dd>Name of created trackbar.&nbsp;<dt>window_name<dd>Name of the window which will
  be used as a parent for created trackbar.<dt>value<dd>Pointer to the integer
  variable, which value will reflect the position of the slider. Upon the
  creation the slider position is defined by this variable.<dt>count<dd>Maximal
  position of the slider. Minimal position is always 0.<dt>on_change<dd>Pointer
  to the function to be called every time the slider changes the position. This
  function should be prototyped as&nbsp;<dd>void Foo(int);<dd>Can be NULL if
  callback is not required.
</dl><p>
The function <a href="#decl_cvCreateTrackbar">cvCreateTrackbar</a>
  creates the trackbar(slider) with the specified name and range, assigns the variable to
  be syncronized with trackbar position and specifies callback function to be
  called on trackbar position change. The created trackbar is displayed on top
of given window.</p>


<hr><h3><a name="decl_cvGetTrackbarPos">cvGetTrackbarPos</a></h3>
  <p class="Blurb">Retrieves trackbar position</p>
  <pre>int cvGetTrackbarPos( const char* trackbar_name, const char* window_name );</pre><dl>
<dt>trackbar_name<dd>Name of&nbsp; trackbar.&nbsp;<dt>window_name<dd>Name of the window which
  is the parent of trackbar.
</dl><p>
The function <a href="#decl_cvGetTrackbarPos">cvGetTrackbarPos</a>
  returns the ciurrent position of the specified trackbar.</p>


<hr><h3><a name="decl_cvSetTrackbarPos">cvSetTrackbarPos</a></h3>
  <p class="Blurb">Sets trackbar position</p>
  <pre>void cvSetTrackbarPos( const char* trackbar_name, const char* window_name, int pos );</pre>
  <dl>
<dt>trackbar_name<dd>Name of&nbsp; trackbar.&nbsp;<dt>window_name<dd>Name of the window which
  is the parent of trackbar.
<dt>pos</dt>
<dd>New position.</dd>
</dl><p>
The function <a href="#decl_cvSetTrackbarPos">cvSetTrackbarPos</a>
  sets the position of the specified trackbar.</p>


<hr><h3><a name="decl_cvSetMouseCallback">cvSetMouseCallback</a></h3>
  <p class="Blurb">Assigns callback for mouse events</p>
  <pre>#define CV_EVENT_MOUSEMOVE      0
#define CV_EVENT_LBUTTONDOWN    1
#define CV_EVENT_RBUTTONDOWN    2
#define CV_EVENT_MBUTTONDOWN    3
#define CV_EVENT_LBUTTONUP      4
#define CV_EVENT_RBUTTONUP      5
#define CV_EVENT_MBUTTONUP      6
#define CV_EVENT_LBUTTONDBLCLK  7
#define CV_EVENT_RBUTTONDBLCLK  8
#define CV_EVENT_MBUTTONDBLCLK  9

#define CV_EVENT_FLAG_LBUTTON   1
#define CV_EVENT_FLAG_RBUTTON   2
#define CV_EVENT_FLAG_MBUTTON   4
#define CV_EVENT_FLAG_CTRLKEY   8
#define CV_EVENT_FLAG_SHIFTKEY  16
#define CV_EVENT_FLAG_ALTKEY    32

CV_EXTERN_C_FUNCPTR( void (*CvMouseCallback )(int event, int x, int y, int flags) );
</pre>
  <pre>HIGHGUI_API void cvSetMouseCallback( const char* window_name, CvMouseCallback on_mouse );

</pre><dl>
<dt>window_name<dd>Name of the window.
<dt>on_mouse<dd>Pointer to the function to be called every time mouse event occurs
                in the specified window. This function should be prototyped as
  <pre>void Foo(int event, int x, int y, int flags);</pre>
  where <em>event</em> is one of <em>CV_EVENT_*</em>,
  <em>x</em> and <em>y</em> are coordinates of mouse pointer in image coordinates
  (not window coordinates) and <em>flags</em> is a combination of <em>CV_EVENT_FLAG</em>.
</dl><p>
The function <a href="#decl_cvSetMouseCallback">cvSetMouseCallback</a>
sets the callback function for mouse events occuting within the specified
window. To see how it works, look at <a href="../../samples/c/ffilldemo.c">
opencv/samples/c/ffilldemo.c</a> demo</p>


<hr><h2><a name="Image_handling_functions">Image handling functions</a></h2>


<hr><h3><a name="decl_cvLoadImage">cvLoadImage</a></h3>
  <p class="Blurb">Loads an image from file</p>
<pre>
IplImage* cvLoadImage( const char* filename, int iscolor CV_DEFAULT(1));</pre>
  <dl>
<dt>filename<dd>Name of file to be loaded.<dt>iscolor<dd>If &gt;0, the loaded image
  will always have 3 channels;<dd>if 0, the loaded image will always have 1 channel;<dd>if
  &lt;0, the loaded image will be loaded as is (with number of channels depends
  on the file).
</dl>
  <p>
The function <a href="#decl_cvLoadImage">cvLoadImage</a> loads an image
  from the specified file and returns the pointer to the loaded image. Currently the following file formats are
  supported: Windows bitmaps - BMP, DIB; JPEG files - JPEG, JPG, JPE;
Portable Network Graphics - PNG; Portable image format - PBM, PGM, PPM; Sun
rasters - SR, RAS; TIFF files - TIFF, TIF.
</p>
<p>
If &quot;filename&quot; does not contain full path, the file is searched in the
current directory and in directories specified by <a href="#decl_cvAddSearchPath">cvAddSearchPath</a>
</p>


<hr><h3><a name="decl_cvSaveImage">cvSaveImage</a></h3>
<p class="Blurb">Saves an image to the file</p>
<pre>int cvSaveImage( const char* filename, const CvArr* image );</pre>
<dl>
<dt>filename<dd>Name of the file.<dt>image<dd>Image to be saved.&nbsp;
</dl>
<p>
The function <a href="#decl_cvSaveImage">cvSaveImage</a>
saves the image to the specified file.
</p>


<hr>
<h3><a name="decl_cvShowImage">cvShowImage</a></h3>
<p class="Blurb">Shows the image in the specified window</p>
<pre>void cvShowImage( const char* name, const CvArr* image );
</pre>
<dl>
<dt>name<dd>Name of the window to attach the image to.<dt>image<dd>Image to be
shown.
</dl><p>
The function <a href="#decl_cvShowImage">cvShowImage</a>
shows the image in the specified window. If the window was created with CV_WINDOW_AUTOSIZE
flag then the image will be shown with its original size otherwise
the image will be scaled to fit the window.&nbsp;
</p>


<hr><h3><a name="decl_cvConvertImage">cvConvertImage</a></h3>
<p class="Blurb">Converts one image to another with optional vertical flip</p>
<pre>
void cvConvertImage( const CvArr* src, CvArr* dst, int flip CV_DEFAULT(0));
</pre>
<dl>
<dt>src<dd>Source image.<dl>
<dt>dst<dd>Destination image.
<dt>flip</dt>
<dd>1 - to flip image vertically,</dd>
<dd>0 - not to flip.</dd>
</dl>
</dl><p>
The function <a href="#decl_cvConvertImage">cvConvertImage</a>
  converts one image to another and flips the result vertically if required.
  This function does the same conversions as <a href="#decl_cvCvtColor">cvCvtColor</a>
 function, but do this automatically accordingly to formats of input and output
images.</p>


<hr><h2><a name="Video_I/O_functions">Video I/O functions</a></h2>


<hr><h3><a name="decl_CvCapture">CvCapture</a></h3>
<p class="Blurb">Structure for getting video from camera or AVI file</p>
<pre>
typedef struct CvCapture CvCapture;
</pre>
<p>
The structure <a href="#decl_CvCapture">CvCapture</a>
does not have public interface and is used only as a parameter for video
capture functions.
</p>


<hr>
<h3><a name="decl_cvCaptureFromAVI">cvCaptureFromAVI</a></h3>
<p class="Blurb">Allocates CvCapture structure binds it to the specified AVI
file</p>
<pre>CvCapture* cvCaptureFromAVI( const char* filename );</pre>
<dl>
<dt>filename<dd>Name of the AVI file.
</dl><p>
The function <a href="#decl_cvCaptureFromAVI">cvCaptureFromAVI</a>
allocates and initialized the CvCapture structure for reading the video stream
from the specified AVI file.
</p>
<p>After the allocated structure is not used any more it should be released by
<a href="#decl_cvReleaseCapture">cvReleaseCapture</a> function.
</p>


<hr><h3><a name="decl_cvCaptureFromCAM">cvCaptureFromCAM</a></h3>
<p class="Blurb">Allocates CvCapture structure and&nbsp; binds it to the video camera</p>
<pre>CvCapture* cvCaptureFromCAM( int index );</pre>
<dl>
<dt>index<dd>Index of the camera to be used. If there is only one camera or it
does not matter what camera to use,&nbsp; -1 may be passed.
</dl><p>
The function <a href="#decl_cvCaptureFromCAM">cvCaptureFromCAM</a>
allocates and initialized the CvCapture structure for reading a video stream
from the camera. Currently two camera interfaces can be used: Video for
Windows (VFW) and Matrox Imaging Library (MIL). To connect to VFW camera the
parameter &quot;index&quot; should be in range 0-10, to connect to MIL camera the
parameter &quot;index&quot; should be in range 100-115. If -1 is passed then
the function searches for VFW camera first and then for MIL camera.
</p>
<p>After the allocated CvCapture structure is not used any more it should be released by
<a href="#decl_cvReleaseCapture">cvReleaseCapture</a> function.
</p>


<hr><h3><a name="decl_cvReleaseCapture">cvReleaseCapture</a></h3>
<p class="Blurb">Releases the CvCapture structure</p>
<pre>void cvReleaseCapture( CvCapture** capture );
</pre>
<dl>
<dt>capture<dd>Address of the pointer to CvCapture structure to be released.
</dl><p>
The function <a href="#decl_cvReleaseCapture">cvReleaseCapture</a>
releases the CvCapture structure allocated by <a href="#decl_cvCaptureFromAVI">cvCaptureFromAVI</a>
or <a href="#decl_cvCaptureFromCAM">cvCaptureFromCAM</a>.&nbsp;
</p>


<hr><h3><a name="decl_cvGrabFrame">cvGrabFrame</a></h3>
<p class="Blurb">Grabs frame from camera or AVI</p>
<pre>int cvGrabFrame( CvCapture* capture );</pre>
<dl>
<dt>capture<dd>CvCapture representing camera or AVI file.
</dl><p>
The function <a href="#decl_cvGrabFrame">cvGrabFrame</a>
grabs the frame from camera or AVI. The grabbed frame is stored internally.
The purpose of this function is to grab frame <u>fast</u> what is important
for syncronization in case of reading from several cameras simultaneously. The
grabbed frames are not exposed because they may be stored in compressed format
(as defined by camera/driver). To get access to the grabbed frame <a href="#decl_cvRunHaarHaarClassifierCascade">cvGrabFrame</a>
should be followed by <a href="#decl_cvRetrieveFrame">cvRetrieveFrame</a>.
</p>


<hr><h3><a name="decl_cvRetrieveFrame">cvRetrieveFrame</a></h3>
<p class="Blurb">Gets the image grabbed with cvGrabFrame</p>
<pre>IplImage* cvRetrieveFrame( CvCapture* capture );</pre>
<dl>
<dt>capture<dd>CvCapture representing camera or AVI file.
</dl><p>
The function <a href="#decl_cvRetrieveFrame">cvRetrieveFrame</a>
returns the pointer to the image grabbed with <a href="#decl_cvGrabFrame">cvGrabFrame</a>
function. The returned image should not be released by the user.
</p>


<hr><h3><a name="decl_cvQueryFrame">cvQueryFrame</a></h3>
<p class="Blurb">Grabs and returns a frame from camera or
AVI</p>
<pre>IplImage* cvQueryFrame( CvCapture* capture );</pre>
<dl>
<dt>capture<dd>CvCapture representing camera or AVI file.
</dl><p>
The function <a href="#decl_cvQueryFrame">cvQueryFrame</a>
grabs a frame from camera or AVI and returns the pointer to grabbed image.
Actually this function just&nbsp; successively calls <a href="#decl_cvRunHaarHaarClassifierCascade">cvGrabFrame</a> and
<a href="#decl_cvRetrieveFrame">cvRetrieveFrame</a>. The
returned image should not be released by the user.
</p>


<hr><h3><a name="decl_cvGetCaptureProperty">cvGetCaptureProperty</a></h3>
  <p class="Blurb">Gets camera/AVI properties</p>
  <pre>double cvGetCaptureProperty( CvCapture* capture, int property_id );</pre>
  <dl>
<dt>capture<dd>CvCapture representing camera or AVI file.
<dt>property_id<dd>property identifier. Can be one of the following:<br>
  CV_CAP_PROP_POS_MSEC - film current position in milliseconds or video capture timestamp<br>
  CV_CAP_PROP_POS_FRAMES - 0-based index of the frame to be decoded/captured next<br>
  CV_CAP_PROP_POS_AVI_RATIO - relative position of AVI file (0 - start of the film, 1 - end of the film)<br>
  CV_CAP_PROP_FRAME_WIDTH - width of frames in the video stream&nbsp;<br>
  CV_CAP_PROP_FRAME_HEIGHT - height of frames in the video stream<br>
  CV_CAP_PROP_FPS - frame rate<br>
  CV_CAP_PROP_FOURCC - 4-character code of codec.
  CV_CAP_PROP_FRAME_COUNT - number of frames in AVI file.
  </dl><p>
The function <a href="#decl_cvGetCaptureProperty">cvGetCaptureProperty</a>
retrieves the specified property of camera or AVI.
</p>


<hr><h3><a name="decl_cvSetCaptureProperty">cvSetCaptureProperty</a></h3>
<p class="Blurb">Sets camera/AVI properties</p>
<pre>int cvSetCaptureProperty( CvCapture* capture, int property_id, double value );</pre>
  <dl>
<dt>capture<dd>CvCapture representing camera or AVI file.<dt>property_id<dd>property
  identifier. Can be one of the following:<dd>CV_CAP_PROP_POS_MSEC
  - (only for AVI)<br>
 CV_CAP_PROP_POS_MSEC - set position (only for AVIs)<br>
 CV_CAP_PROP_POS_FRAMES - set position (only for AVIs)<br>
 CV_CAP_PROP_POS_AVI_RATIO - set position (only for AVIs)<br>
 CV_CAP_PROP_FRAME_WIDTH - width of frames in the video stream&nbsp;<br>
 CV_CAP_PROP_FRAME_HEIGHT - height of frames in the video stream<br>
 CV_CAP_PROP_FPS - frame rate<br>
 CV_CAP_PROP_FOURCC - 4-character code of codec.
<dt>value<dd>value of the property.
 </dl><p>
The function <a href="#decl_cvSetCaptureProperty">cvSetCaptureProperty</a>
sets the specified property of camera or AVI. Currently the function works only
for setting some AVI properties: CV_CAP_PROP_POS_MSEC, CV_CAP_PROP_POS_FRAMES,
CV_CAP_PROP_POS_AVI_RATIO
</p>


<hr><h3><a name="decl_cvCreateAVIWriter">cvCreateAVIWriter</a></h3>
<p class="Blurb">Creates AVI writer&nbsp;&nbsp;&nbsp;</p>
<pre>
typedef struct CvAVIWriter CvAVIWriter;
CvAVIWriter* cvCreateAVIWriter( const char* filename, int fourcc, double fps, CvSize frameSize )
</pre>
  <dl>
<dt>filename<dd>Name of AVI file to be written to. If file does not exist it is
  created.
<dt>fourcc<dd>4-character code of codec used to compress the frames.
              For example, CV_FOURCC('P','I','M','1') is MPEG-1 codec,
              CV_FOURCC('M','J','P','G') is motion-jpeg codec etc.
              Under Win32 it is possible to pass -1 in order
              to choose compression method and additional compression parameters
              from dialog.
<dt>fps<dd>Framerate of the created video stream.
<dt>frameSize<dd>Size of the frames of AVI file.
</dl><p>
The function <a href="#decl_cvCreateAVIWriter">cvCreateAVIWriter</a>
allocates and initializes the hidden structure CvAVIWriter that is used for writing
AVI files frame by frame.
</p>
<p><b>NOTE</b>: Writing to AVIs works under Win32 only</p>

<hr><h3><a name="decl_cvReleaseAVIWriter">cvReleaseAVIWriter</a></h3>
<p class="Blurb">Releases AVI writer&nbsp;&nbsp;&nbsp;</p>
<pre>void cvReleaseAVIWriter( CvAVIWriter** writer );</pre>
<dl>
<dt>writer<dd>address of pointer to the released CvAVIWriter structure.
</dl><p>
The function <a href="#decl_cvReleaseAVIWriter">cvReleaseAVIWriter</a>
closes the AVI file being written and deallocates the memory used by CvAVIWriter
structure.
</p>


<hr><h3><a name="decl_cvWriteToAVI">cvWriteToAVI</a></h3>
<p class="Blurb">Writes a frame to AVI file</p>
<pre>int cvWriteToAVI( CvAVIWriter* writer, const IplImage* image );
</pre>
<dl>
<dt>writer<dd>Pointer to CvAVIWriter structure.
<dt>image&nbsp;</dt>
<dd>Frame to be written/appended to AVI file</dd>
</dl><p>
The function <a href="#decl_cvWriteToAVI">cvWriteToAVI</a>
writes/appends one frame to AVI file binded to &quot;writer&quot;.
</p>


<hr><h2><a name="Support/system_functions">Support/system functions</a></h2>

<hr><h3><a name="decl_cvInitSystem">cvInitSystem</a></h3>
<p class="Blurb">Initializes HighGUI</p>
<pre>void cvInitSystem( int argc, char** argv );</pre>
<dl>
<dt>argc<dd>Number of command line arguments.
<dt>argv<dd>Array of command line arguments
</dl><p>
The function <a href="#decl_cvInitSystem">cvInitSystem</a>
initializes HighGUI. If it wasn't called explicitly by the user before the first window
is created, it is called implicitly then with <em>argc</em>=0, <em>argv</em>=NULL.
Under Win32 there is no need to call it explicitly. Under X Window the arguments are
used for creating Application Shell that is a standard way to define a look of HighGUI windows
and controls.
</p>


<hr><h3><a name="decl_cvWaitKey">cvWaitKey</a></h3>
<p class="Blurb">Waits for pressed key</p>
<pre>int cvWaitKey(int delay CV_DEFAULT(0));</pre>
<dl>
<dt>delay<dd>Delay in milliseconds.
</dl><p>
The function <a href="#decl_cvWaitKey">cvWaitKey</a> waits for key event infinitely (delay&lt;=0) or for "delay" milliseconds.
Returns the code of pressed key or -1 if key was not pressed until the specified timeout has elapsed.
</p><p>
<b>Note</b>: This function is the only method in HighGUI to fetch and handle events so
it needs to be called periodically for normal event processing.
</p>


<hr><h3><a name="decl_cvAddSearchPath">cvAddSearchPath</a></h3>
<p class="Blurb">Adds the specified path to the list of search
paths;</p>
<pre>/* add folder to the image search path (used by cvLoadImage) */
void cvAddSearchPath( const char* path );</pre>
  <dl>
<dt>path<dd>Path to add to the search list.
</dl><p>
The function <a href="#decl_cvAddSearchPath">cvAddSearchPath</a>
adds the specified folder to the search path list. The search path list is used
by <a href="#decl_cvLoadImage">cvLoadImage</a> function.
</p>
<hr>
</li>
</body>
</html>

