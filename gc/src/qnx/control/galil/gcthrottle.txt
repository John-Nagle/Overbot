'	Throttle by wire
'	John Nagle
'	Team Overbot


#AUTO
'	Externally visible variables set by computer over the network.
'	FAULT is the fault code.  Output
FAULT=0
'	READY indicates that the system will respond to goal setting.  Output
READY=0
'	AUTO is always on, there is only AUTO mode
AUTO=1
'	GOALMIN and GOALMAX are the allowed range for GOAL, Output
GOALMIN=0
'	GOALMAX=125000
GOALMAX=94000
'	GOAL is set to set the desired throttle position. Input.
'	Currently, throttle is in ENCODER COUNTS (0..GOALMAX)
GOAL=0
'	SPEED is desired movement speed. Input 
SPEED=125000
'	HOME is offset of home position
HOME=0

'	Fix recommended by Galil tech support.
CW,1

'	Throttle drive parameters
'	Operating range
MAXE=GOALMAX
MINE=0
'	Limit switches are reversed
MO
ST
CN 1,-1,-1
'	Motor torque limited to small continuous stall current
'	This value must NOT EXCEED 0.5 or motor burnout is likely.
'	TL 0.5
'	Now increased for higher gear ratio, per Vic Scheinman.
'	But integrator limit is limited to stall current.
'	There is now a polyswitch fuse protecting the motor.
'	Also, off-on-error mode protects the device.
TL 1.0
IL 0.5
'	Controller gains and speeds (rather ad-hoc, but tolerable)
KD 1
KP 0.1
KI 0
'	Conservative initial conditions
'	Set initial speed to 0 to avoid runaway
'	Set huge decel to avoid overrun during homing
DC 1000000
AC 25000
SP 100
'	System initialization
'	Home to reverse limit and zero encoder.
'	Reverse limit is throttle idle.

'	Home the steering drive
JS #MVHOME

'	Do steering loop
JS #MTHROT
EN

' Throttle control
' At entry throttle drive must be homed.
#MTHROT
MTIME=10
'	Set motion limits
BL MINE
FL MAXE
'	Enable motor
'	Actual acclerations for controlled movement
DC 250000
AC 250000
'	Maximum error is 25% of full range
'	Controller will fault if that is exceeded.
'	Off-on-error enabled
OE 1
SP SPEED
SH
PA 0
BG
AM
ER GOALMAX*0.25

'	Synch. move system
JS #MVWAIT
'	Tell host we are ready for commands
READY=1
#MLOOP
'	Take command from variable GOAL
MVGOAL=GOAL
'	Check for limit switch fault
JS #LIMCHK
'	Do the move
JS #MVTO
WT MTIME
JP #MLOOP
EN

'	Subroutine
'	Check for both limit switches set, and fault if set
'	If we lose limit switch power, this shuts the motor off.
'	Otherwise, we have a runaway.
'
#LIMCHK
IF ((_LR=0) & (_LF=0))
'	Both switches set. Not possible unless electrical problem.
'	Kill motor power and fault out.
FAULT=8
READY=0
ST
MO
AB
HX
ENDIF
EN


'	Subroutine
'	Home throttle to idle position (reverse limit) and zero encoder.
'	Rather slow.
#MVHOME
HMTRIES=0
HMTMAX=1000
'	Check limit switches before powering up motor.
JS #LIMCHK
'	No position error checking during homing.
OE 0
'	Disable limits during homing.
BL -10000000
FL 10000000
SH
'	Start jogging towards limit switch if not already there.
IF (_LR=0)
JP #HMDONE
ELSE
JG -20000
BG
ENDIF
#HMLOOP
'	Check for limit switch fault
JS #LIMCHK
'	If hit limit, done
IF (_LR=0)
JP #HMDONE
ENDIF
'	Did homing succeed? Time out
HMTRIES=HMTRIES+1
IF (HMTRIES>HMTMAX)
FAULT=6
READY=0
AB
MO
HX
ENDIF
WT 10
JP #HMLOOP
'	Success moving to low limit stop. 
#HMDONE
ST
AM
'	Low limit switch is now tripped. Move off limit.
HMTRIES=0
JG 1000
BG
#HMLOOP2
'	Check for limit switch fault
JS #LIMCHK
'	If clear of limit, done
IF (_LR<>0)
JP #HMDONE2
ENDIF
'	Did homing succeed? Time out
HMTRIES=HMTRIES+1
IF (HMTRIES>HMTMAX)
FAULT=7
READY=0
MO
AB
HX
ENDIF
WT 10
JP #HMLOOP2
'	Now positioned just off low limit stop.
#HMDONE2
'	Set encoder to offset from zero and go there.
ST
AM
DP -HOME
AM
SH
PA 0
BG
AM
'	We are now aligned.
EN


'
'	General move support
'
'	Supports absolute moves which can be interrupted
'
'
'	#MVTO  --start movement towards MVGOAL
'
'	Obeys hardware and software limit stops
'
#MVTO
'	Round to integer encoder count
TGOAL=@RND[MVGOAL]
'	Check and obey software limits. Never command move into limit.
JS #MVLIM
'	Decide whether a direction reverse and resync is needed.
IF (((TDIFF>0) & (MVPDIFF<0)) | ((TDIFF<0) & (MVPDIFF>0)))
'	Don't reverse if the overshoot is small.  Otherwise, small
'	changes in the destination produce random stalls near the
'	beginning of motion
'	Estimate worst case stopping distance
TSTOPDST=(0.5*_SP)*(_SP/_DC)
IF ((@ABS[TDIFF]<TSTOPDST) & (@ABS[_TP-MVPPOS] >= TSTOPDST))
TDIFF=0
ELSE
'	We are going to move, and we have to stop the current move first.
'	When MVWAIT returns, commanded velocity is zero.
JS #MVWAIT
'	Must recalc move limits after a wait. MVPPOS may change.
JS #MVLIM
ENDIF
'	Normal case; extend existing IP move
ENDIF
'	Move, if necessary
IF (TDIFF <> 0)
ERRBG=_BG
ERRTDIFF = TDIFF
IP TDIFF
MVPPOS = MVPPOS+TDIFF
MVPDIFF = TDIFF
ENDIF
EN

'
'	#MVWAIT  -- wait for move to finish
'
'	Must call this once before calling MVTO for the first time
'	Stops, waits for move to finish, resyncs
'
#MVWAIT
TTIME=TIME
ST
AM
SH
AM
MVPDIFF=0
MVPPOS=_PA
EN

'
'	#MVLIM  -- check limits of move
'
'	Input: TGOAL
'	Output: TDIFF
'	Looks at: MVPPOS, limit info
'
'	Check and obey software limits. Never command move into limit.
#MVLIM
IF (TGOAL > _FL)
TGOAL = _FL
ENDIF
IF (TGOAL < _BL)
TGOAL = _BL
ENDIF
TDIFF = TGOAL-MVPPOS
'	Check and obey limit switches.  Never command move into limit.
IF ((TDIFF > 0) & (_LF1=0))
TDIFF=0
ENDIF
IF ((TDIFF < 0) & (_LR1=0))
TDIFF=0
ENDIF
EN

'
'	Error handling
'
'	Position error too large. Servo failure.
'	This protects against servomotor burnout.
'	
'	A controller reset is needed after this.
'
#POSERR
ST
MO
IF FAULT=0
FAULT=1
ENDIF
HX
EN





