'	Steer by wire and computer.
'	John Nagle
'	Team Overbot

#AUTO
'	Externally visible variables set and read  by computer over the network.
'	FAULT is the fault code.  Output
FAULT=0
'	READY indicates that the system will respond to goal setting.  Output
READY=0
'	AUTO is set to take over from manual steering. Input
AUTO=0
'	GOAL is set to set the desired steering position. Input.
GOAL=0
'	GOALMIN and GOALMAX are the allowed range for GOAL, Output
GOALMIN=-180000
GOALMAX=180000
'	SPEED is desired movement speed. Input 
'	Should not exceed physical limits of drive (~120000 counts/sec)
SPEED=120000
'	SWMAN  -- true if in manual mode
SWMAN=1

'	Steering wheel parameters
'	Note that min can be greater than max.
'	This indicates a reversed encoder.
WHMINV=3.82
WHMAXV=0.89
WHMINE=158
WHMAXE=-158
' Steering drive parameters
STMINV=0.0
STMAXV=5.0
STMINE=GOALMIN
STMAXE=GOALMAX
' Motor torque limited to continuous stall current
TL 4.89
' Controller gains and speeds (rather ad-hoc, but tolerable)
KD 256
KP 50
KI 0.5
DC 500000
AC 500000
SP SPEED
' System initialization
' Initialize steering wheel position
WHIV=@AN[2]
'	Initial steering wheel pos is in range 0 to 1.0
WHIPOS=((WHIV-WHMINV) / (WHMAXV-WHMINV))
WHIENC=(WHMINE*(1-WHIPOS)) + (WHMAXE*WHIPOS)
DE WHIENC
' Home the steering drive
JS #MVHOME
' Do steering loop
JS #MSTEER
EN

' Manual steering
' At entry steering drive must be homed and steering wheel calibrated
#MSTEER
MTIME=10
STSCAL=(STMAXE-STMINE)/(WHMAXE-WHMINE)
' Set motion limits
BL STMINE
FL STMAXE
' Enable motor
ER 20000
' No off-on-error
OE 0
SH
SP SPEED
PA 0
AM
'	Synch. move system
JS #MVWAIT
#MLOOP
'	Read manual/auto switch
JS #MANSW
'	If auto mode, take command from variable GOAL
IF (SWMAN=0)
IF (FAULT=0)
READY=1
ENDIF
ELSE
READY=0
' Manual steering - take command from steering wheel
WHPOSE=_DE
GOAL=WHPOSE*STSCAL
ENDIF
JS #SMOVE
WT MTIME
JP #MLOOP
EN

'
'	Steer to requested goal position
'	
'	Both manual and auto steering use this.
'
'	Input: GOAL
'	Ouput: FAULT
'
'
'	Steer to requested goal position
'	
'	Both manual and auto steering use this.
'
'	Input: GOAL
'	Ouput: FAULT
'
#SMOVE
'	Get steering goal
MVGOAL=GOAL
JS #MVTO
EN

'	Subroutine
'	Home steering drive using pot - simple version.
'	Rather slow.
'	Returns with steering drive homed and encoder zeroed.
'	NEED STATUS RETURN
#MVHOME
'	Steering pot params
'	Steering pot is centered at HMHMV
HMMAXV=0.38
HMMINV=4.48
HMMAXE=100000
HMMINE=-100000
'	Voltage of steering shaft pot at home position. This is our centering adjustment
HMHMV=1.95
HMVTH=0.05
HMMAX=100000
HMPREVM=0
HMTRIES=0
HMTMAX=100
SP 50000
'	Scale - encoder counts per volt
HMSCALE=(HMMAXE-HMMINE)/(HMMAXV-HMMINV)
ER 20000
OE 0
'	Disable limits during homing.
BL -10000000
FL 10000000
SH
#HMLOOP
HMVNOW=@AN[1]
HMVERR=HMHMV-HMVNOW
'	Check for close enough to home position
IF (@ABS[HMVERR] < HMVTH)
JP #HMDONE 
ENDIF
HMMOVE=HMVERR*HMSCALE
'	Bound size of move
IF (HMMOVE>HMMAX)
HMMOVE=HMMAX
ENDIF
IF (HMMOVE<-HMMAX)
HMMOVE=-HMMAX
ENDIF
'	Do the move
IP HMMOVE
AM
HMPREVM=HMMOVE
'	Did homing succeed?
HMTRIES=HMTRIES+1
IF (HMTRIES>HMTMAX)
FAULT=6
READY=0
HX
ENDIF
JP #HMLOOP
#HMDONE
'	Set encoder to zero
DP 0
EN


'
'	General move support
'
'	Supports absolute moves which can be interrupted
'
'
'	#MVTO  --start movement towards MVGOAL
'
'	Obeys hardware and software limit stops
'
#MVTO
'	Round to integer encoder count
TGOAL=@RND[MVGOAL]
'	Check and obey software limits. Never command move into limit.
JS #MVLIM
'	Decide whether a direction reverse and resync is needed.
IF (((TDIFF>0) & (MVPDIFF<0)) | ((TDIFF<0) & (MVPDIFF>0)))
'	Don't reverse if the overshoot is small.  Otherwise, small
'	changes in the destination produce random stalls near the
'	beginning of motion
'	Estimate worst case stopping distance
TSTOPDST=(0.5*_SP)*(_SP/_DC)
IF ((@ABS[TDIFF]<TSTOPDST) & (@ABS[_TP-MVPPOS] >= TSTOPDST))
TDIFF=0
ELSE
'	We are going to move, and we have to stop the current move first.
'	When MVWAIT returns, commanded velocity is zero.
JS #MVWAIT
'	Must recalc move limits after a wait. MVPPOS may change.
JS #MVLIM
ENDIF
'	Normal case; extend existing IP move
ENDIF
'	Move, if necessary
IF (TDIFF <> 0)
ERRBG=_BG
ERRTDIFF = TDIFF
IP TDIFF
MVPPOS = MVPPOS+TDIFF
MVPDIFF = TDIFF
ENDIF
EN

'
'	#MVWAIT  -- wait for move to finish
'
'	Must call this once before calling MVTO for the first time
'	Stops, waits for move to finish, resyncs
'
#MVWAIT
TTIME=TIME
ST
AM
SH
AM
MVPDIFF=0
MVPPOS=_PA
EN

'
'	#MVLIM  -- check limits of move
'
'	Input: TGOAL
'	Output: TDIFF
'	Looks at: MVPPOS, limit info
'
'	Check and obey software limits. Never command move into limit.
#MVLIM
IF (TGOAL > _FL)
TGOAL = _FL
ENDIF
IF (TGOAL < _BL)
TGOAL = _BL
ENDIF
TDIFF = TGOAL-MVPPOS
'	Check and obey limit switches.  Never command move into limit.
IF ((TDIFF > 0) & (_LF1=0))
TDIFF=0
ENDIF
IF ((TDIFF < 0) & (_LR1=0))
TDIFF=0
ENDIF
EN
'
'	MANSW -- read auto/manual switch
'
#MANSW
SWMAN=(@IN[3]=0)
'	Export for external read
AUTO=(SWMAN=0)
EN


'
'	Error handling
'
'	Error handling removed.  Better to keep servoloop running.
'




